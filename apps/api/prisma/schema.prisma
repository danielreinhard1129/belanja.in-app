// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model Address {
  id            Int     @id @default(autoincrement())
  addressLine   String
  lat           Float
  long          Float
  isPrimary     Boolean @default(false)
  postalCode    Int
  provinceId    Int
  cityId        Int
  subdistrictId Int
  userId        Int
  isDelete      Boolean @default(false)

  provinces    Province    @relation(fields: [provinceId], references: [id])
  cities       City        @relation(fields: [cityId], references: [id])
  subdistricts Subdistrict @relation(fields: [subdistrictId], references: [id])

  Delivery Delivery[]
  user     User       @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model City {
  id           Int           @id
  provinceId   Int?
  citName      String?       @db.VarChar(255)
  postal_code  String?       @db.Char(5)
  province     Province?     @relation(fields: [provinceId], references: [id])
  subdistricts Subdistrict[]

  addresses Address[]
  Store     Store[]

  @@map("cities")
}

model Province {
  id           Int       @id
  provinceName String?   @db.VarChar(255)
  cities       City[]
  addresses    Address[]

  @@map("provinces")
}

model Subdistrict {
  id              Int       @id
  cityId          Int?
  subdistrictName String?   @db.VarChar(255)
  city            City?     @relation(fields: [cityId], references: [id])
  Address         Address[]

  @@map("subdistricts")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String?
  isVerified Boolean?
  isDelete   Boolean?  @default(false)
  referral   String?   @unique
  role       Role      @default(USER)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  avatarUrl  String?
  provider   String?
  gender     String?
  birthDate  DateTime?

  addresses    Address[]
  storeAdmin   StoreAdmin?
  Order        Order[]
  userDiscount userDiscount[]
  UserVoucher  UserVoucher[]
  referrer     ReferralHistory[] @relation(name: "referrer")
  referred     ReferralHistory[] @relation(name: "referred")
  Cart         Cart[]

  @@map("users")
}

enum Role {
  USER
  STOREADMIN
  SUPERADMIN
}

model ReferralHistory {
  id         Int @id @default(autoincrement())
  referrerId Int
  referredId Int

  referrer User @relation(fields: [referrerId], references: [id], name: "referrer")
  referred User @relation(fields: [referredId], references: [id], name: "referred")

  @@map("referral_histories")
}

model StoreAdmin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  nip       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  stores    Store?

  @@map("store_admin")
}

model Store {
  id            Int             @id @default(autoincrement())
  name          String
  qty           Int             @default(0)
  lat           Float
  long          Float
  isPrimary     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isDelete      Boolean?        @default(false)
  cityId        Int
  storeAdminId  Int?            @unique
  storeAdmin    StoreAdmin?     @relation(fields: [storeAdminId], references: [id])
  storeProduct  StoreProduct[]
  discounts     Discount[]
  stockJournals StockJournal[]
  JournalDetail JournalDetail[]
  Order         Order[]
  Delivery      Delivery[]
  City          City            @relation(fields: [cityId], references: [id])
  Cart          Cart[]

  @@map("stores")
}

model StoreProduct {
  id        Int      @id @default(autoincrement())
  qty       Int
  storeId   Int
  productId Int
  store     Store    @relation(fields: [storeId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  isActive  Boolean? @default(true)
  updatedAt DateTime @updatedAt

  @@unique([storeId, productId])
  @@map("store_products")
}

model StockJournal {
  id            Int             @id @default(autoincrement())
  quantity      Int
  type          String
  isRead        Boolean?        @default(false)
  status        String
  productId     Int
  storeId       Int
  fromStoreId   Int?
  toStoreId     Int?
  product       Product         @relation(fields: [productId], references: [id])
  store         Store           @relation(fields: [storeId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  JournalDetail JournalDetail[]

  @@map("stock_journals")
}

enum JournalType {
  MUTATION @map("MUTATION")
  INCREASE @map("INCREASE")
  DECREASE @map("DECREASE")
  PURCHASE @map("PURCHASE")
  REFUND   @map("REFUND")
}

enum JournalStatus {
  WAITING_ADMIN_CONFIRMATION @map("WAITING_ADMIN_CONFIRMATION")
  SUCCESS                    @map("SUCCESS")
  REJECTED                   @map("REJECTED")
  ON_PROGRESS                @map("ON_PROGRESS")
  AUTOMATED                  @map("AUTOMATED")
}

model JournalDetail {
  id             Int          @id @default(autoincrement())
  stockJournalId Int
  stockJournal   StockJournal @relation(fields: [stockJournalId], references: [id])
  toStoreId      Int?
  toStore        Store?       @relation(fields: [toStoreId], references: [id])

  @@map("journal_detail")
}

model Cart {
  id       Int     @id @default(autoincrement())
  qty      Int
  isActive Boolean @default(true)

  productId Int
  storeId   Int
  userId    Int

  products Product @relation(fields: [productId], references: [id])
  stores   Store   @relation(fields: [storeId], references: [id])
  users    User    @relation(fields: [userId], references: [id])

  @@map("carts")
}

model Product {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique
  description   String                 @db.LongText
  weight        Int
  price         Int
  isDelete      Boolean?               @default(false)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  storeProduct  StoreProduct[]
  categories    CategoriesOnProducts[]
  images        ProductImage[]
  discounts     Discount[]
  stockJournals StockJournal[]
  Voucher       Voucher[]
  OrderItems    OrderItems[]
  Cart          Cart[]

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  images    String
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model Category {
  id       Int                    @id @default(autoincrement())
  name     String                 @unique
  isDelete Boolean?               @default(false)
  products CategoriesOnProducts[]

  @@map("categories")
}

model CategoriesOnProducts {
  categoryId Int
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@id([productId, categoryId])
  @@map("categories_on_products")
}

model Discount {
  id            Int          @id @default(autoincrement())
  title         String
  desc          String
  discountType  DiscountType
  discountvalue Float
  discountLimit Float
  minPurchase   Float?
  isActive      Boolean      @default(true)
  isDelete      Boolean?     @default(false)
  storeId       Int
  productId     Int?

  store        Store          @relation(fields: [storeId], references: [id])
  product      Product?       @relation(fields: [productId], references: [id])
  userDiscount userDiscount[]

  @@map("discounts")
}

enum DiscountType {
  PRODUCT
  BOGO
  MIN_PURCHASE
}

model userDiscount {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isUsed    Boolean  @default(false)

  discountId Int
  userId     Int

  users      User         @relation(fields: [userId], references: [id])
  discounts  Discount     @relation(fields: [discountId], references: [id])
  Order      Order[]
  OrderItems OrderItems[]

  @@map("user_discounts")
}

model Voucher {
  id            Int         @id @default(autoincrement())
  code          String
  description   String
  voucherType   VoucherType
  discountValue Int
  expiredDate   DateTime

  productId   Int?
  products    Product?      @relation(fields: [productId], references: [id])
  UserVoucher UserVoucher[]

  @@map("vouchers")
}

enum VoucherType {
  PRODUCT
  DELIVERY
  PURCHASE
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)

  voucherId Int
  userId    Int

  vouchers   Voucher      @relation(fields: [voucherId], references: [id])
  users      User         @relation(fields: [userId], references: [id])
  Order      Order[]
  OrderItems OrderItems[]

  @@map("user_vouchers")
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String
  totalAmount Int
  totalWeight Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      OrderStatus @default(WAITING_FOR_PAYMENT)

  userId         Int
  storeId        Int
  userVoucherId  Int?
  userDiscountId Int?

  users         User          @relation(fields: [userId], references: [id])
  stores        Store         @relation(fields: [storeId], references: [id])
  userDiscounts userDiscount? @relation(fields: [userDiscountId], references: [id])
  userVouchers  UserVoucher?  @relation(fields: [userVoucherId], references: [id])
  OrderItems    OrderItems[]
  Payment       Payment?
  Delivery      Delivery[]

  @@map("orders")
}

enum OrderStatus {
  WAITING_FOR_PAYMENT        @map("WAITING_FOR_PAYMENT")
  WAITING_ADMIN_CONFIRMATION @map("WAITING_ADMIN_CONFIRMATION")
  ORDER_PROCESSED            @map("ORDER_PROCESSED")
  ORDER_SHIPPED              @map("ORDER_SHIPPED")
  ORDER_RECEIVED             @map("ORDER_RECEIVED")
  ORDER_CANCELLED            @map("ORDER_CANCELLED")
}

model OrderItems {
  id            Int  @id @default(autoincrement())
  qty           Int
  total         Int
  discValue     Int
  originalPrice Int
  totalWeight   Int?

  orderId        Int
  productId      Int
  userDiscountId Int?
  userVoucherId  Int?

  orders        Order         @relation(fields: [orderId], references: [id])
  products      Product       @relation(fields: [productId], references: [id])
  userDiscounts userDiscount? @relation(fields: [userDiscountId], references: [id])
  userVouchers  UserVoucher?  @relation(fields: [userVoucherId], references: [id])

  @@map("order_items")
}

model Payment {
  id              Int            @id @default(autoincrement())
  invoiceNumber   String
  paymentStatus   PaymentStatus  @default(PENDING)
  paymentMethod   PaymentMethod?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  amount          Int
  paymentProof    String?
  snapToken       String?
  snapRedirectUrl String?

  orderId Int @unique

  orders Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

enum PaymentStatus {
  COMPLETED @map("COMPLETED")
  CANCELLED @map("CANCELLED")
  DENIED    @map("DENIED")
  EXPIRED   @map("EXPIRED")
  PENDING   @map("PENDING")
}

enum PaymentMethod {
  QRIS            @map("QRIS")
  VIRTUAL_ACCOUNT @map("VIRTUAL_ACCOUNT")
  MANUAL_TRANSFER @map("MANUAL_TRANSFER")
}

model Delivery {
  id              Int            @id @default(autoincrement())
  deliveryNumber  String
  deliveryFee     Int
  status          DeliveryStatus @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deliveryService String?
  deliveryCourier String?

  addressId Int
  storeId   Int
  orderId   Int

  stores    Store   @relation(fields: [storeId], references: [id])
  addresses Address @relation(fields: [addressId], references: [id])
  orders    Order   @relation(fields: [orderId], references: [id])

  @@map("deliveries")
}

enum DeliveryStatus {
  PENDING     @map("PENDING")
  CANCELLED   @map("CANCELLED")
  ON_DELIVERY @map("ON_DELIVERY")
  DELIVERED   @map("DELIVERED")
}
